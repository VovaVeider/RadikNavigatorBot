from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from bot.keyboards import kb_cancel, kb_start_main_menu
from bot.repository import group_repo as gr, user_repo as ur
from bot.utils.states.configure_group_state import ConfigureGroupState

configure_groups_router = Router()


@configure_groups_router.message(StateFilter(ConfigureGroupState.add_group))
async def add_configure_group_handler(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    user = await ur.get_user(message.from_user.id)
    group = await gr.get_group_by_name(new_name)
    if group is None:
        await gr.add_group(new_name)
        await state.clear()
        return await message.answer("‚úÖ –ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É.", reply_markup=kb_start_main_menu(user))
    else:
        return await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")

@configure_groups_router.message(StateFilter(ConfigureGroupState.change_group))
async def change_configure_group_handler(message: types.Message, state: FSMContext):
    await message.answer("–ë–ª–∞ –±–ª–∞ –±–ª–∞ –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —á—É—Ç—å –ø–æ–∑–∂–µ —Å —ç—Ç–∏–º.")
    await state.clear()


@configure_groups_router.message(StateFilter(ConfigureGroupState.delete_group))
async def delete_configure_group_handler(message: types.Message, state: FSMContext):
    user_text = message.text.strip()
    user = await ur.get_user(message.from_user.id)
    try:
        user_text = int(user_text)
    except Exception as e:
        return await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π gID –≥—Ä—É–ø–ø—ã. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")

    group = await gr.get_group_by_id(user_text)
    if group is not None:
        await gr.delete_group(group["id"])
        await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å gID - {user_text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã.", reply_markup=kb_start_main_menu(user))
        return await state.clear()
    else:
        return await message.answer("‚ùå –ì—Ä—É–ø–ø—ã —Å —Ç–∞–∫–∏–º gID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@configure_groups_router.callback_query(lambda callback: callback.data.startswith("configure_group_"))
async def configure_group_callback(callback: types.CallbackQuery, state: FSMContext):
    message_callback = callback.data[16:]

    if message_callback == "add":
        await state.set_state(ConfigureGroupState.add_group)
        await callback.message.answer("‚ûï –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: 1415–ú", reply_markup=kb_cancel())
    elif message_callback == "change":
        await state.set_state(ConfigureGroupState.change_group)
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã.", reply_markup=kb_cancel())
    elif message_callback == "delete":
        await state.set_state(ConfigureGroupState.delete_group)
        await callback.message.answer("üóë –í–≤–µ–¥–∏—Ç–µ gID –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.", reply_markup=kb_cancel())

    return await callback.answer()