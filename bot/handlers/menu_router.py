import os

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from bot.bin.db import db
from bot.keyboards import kb_cancel, ikb_start_add_group, ikb_groups_configure, kb_start_main_menu
from bot.utils.states.find_aud_state import FindAudState
from ..utils.postgres.repository import user_repo as ur
from ..utils.postgres.repository import group_repo as gr
from ..utils.states.upload_file_state import UploadFileState

menu_router = Router()



@menu_router.message(F.text == "üîé –ù–∞–π—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é")
async def find_aud_handler(message: types.Message, state: FSMContext):
    await state.set_state(FindAudState.find_aud)

    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ ( –Ω–∞–ø—Ä–∏–º–µ—Ä: 155 )", reply_markup=kb_cancel())


@menu_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def find_aud_handler(message: types.Message, state: FSMContext):
    profile_text = "üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n" \
                   "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ -> üõ†"



    await message.answer(profile_text, reply_markup=ikb_start_add_group())


@menu_router.message(F.text == "‚ûï –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def schedule_today_handler(message: types.Message, state: FSMContext):
    schedule_message = ""
    user = await ur.get_user(message.from_user.id)
    if (user is not None) and (user.group_id is not None):
        schedule_message += "1. –õ–µ–∫—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –¢–ò–ò, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –û—Ä–µ—à–∫–æ–≤ –í.–ò., \n" \
                           "\tüö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: 128\n" \
                           "\t‚è∞ –í—Ä–µ–º—è: 13:35 ‚Äì 15:10\n\n" \
                           "2. –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –¢–ò–ò, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –û—Ä–µ—à–∫–æ–≤ –í.–ò.\n" \
                           "\tüö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: 128\n" \
                           "\t‚è∞ –í—Ä–µ–º—è: 15:20 ‚Äì 16:55"
    else:
        schedule_message += "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"

    await message.answer(schedule_message)


@menu_router.message(F.document)
async def upload_file_parser_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    user = await ur.get_user(message.from_user.id)
    document = message.document

    if document.mime_type == "text/plain":
        file_info = await message.bot.get_file(document.file_id)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = "../bin/schedule.txt"
        await message.bot.download_file(file_info.file_path, file_path)
        await message.answer(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏ {file_path}.")

        # parse_message = –ü–∞—Ä—Å–∏–Ω–≥(file_path, ......)
        # —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–∞—Ä—Å–µ—Ä–æ–º —Å–æ–∑–¥–∞–π –≤ utils -> other –∏–ª–∏ –≤ bin, –≥–¥–µ —É–¥–æ–±–Ω–æ –±—É–¥–µ—Ç.

        # parse_message = True if parsing finished without errors
        # parse_message = False if parsing finished with some errors
        parse_message = True

        if parse_message:
            await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb_start_main_menu(user))
            try:
                os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            except Exception as e:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return await state.clear()
        else:
            await state.clear()
            return await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=kb_start_main_menu(user))
    else:
        await message.reply("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt.")

@menu_router.message(F.text == "üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
async def upload_file(message: types.Message, state: FSMContext):
    user = await ur.get_user(message.from_user.id)
    if user.role != "admin":
        return
    await message.answer("üìÇ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (.txt).", reply_markup=kb_cancel())
    await state.set_state(UploadFileState.upload_file)



@menu_router.message(F.text == "üë• –ì—Ä—É–ø–ø—ã")
async def upload_file(message: types.Message):
    user = await ur.get_user(message.from_user.id)
    if user.role != "admin":
        return

    groups = await gr.get_groups()
    groups_message = "üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n\n"

    if len(groups) != 0:
        couter_groups = 1
        for group in groups:
            id = group["id"]
            name = group["name"]

            groups_message += f"<blockquote><b>{couter_groups}. {name}</b> \n[gID: {id}]</blockquote>\n"
            couter_groups += 1

    else:
        return await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.")

    return await message.answer(groups_message, parse_mode='HTML', reply_markup=ikb_groups_configure())


