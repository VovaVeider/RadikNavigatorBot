import os

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from bot.keyboards import kb_cancel, ikb_start_add_group, ikb_groups_configure, kb_start_main_menu
from bot.utils.states.find_aud_state import FindAudState
from ..entity.enum.DayOfWeek import DayOfWeek
from ..entity.enum.WeekType import WeekType
from ..entity.shedule.UniversityShedule import UniversitySchedule
from ..parser.parser import Parser
from ..repository import group_repo as gr, user_repo as ur
from ..utils.others.shedule import shedule
from ..utils.states.upload_file_state import UploadFileState
from datetime import datetime

menu_router = Router()


@menu_router.message(F.text == "üîé –ù–∞–π—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é")
async def find_aud_handler(message: types.Message, state: FSMContext):
    await state.set_state(FindAudState.find_aud)
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ ( –Ω–∞–ø—Ä–∏–º–µ—Ä: 155 )", reply_markup=kb_cancel())


@menu_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def find_aud_handler(message: types.Message, state: FSMContext):
    user = await ur.get_user(message.from_user.id)

    user_id = user.user_id
    group = await gr.get_group_by_id(user.group_id)
    group_name = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" if group is None else group["name"]
    role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user.role == "admin" else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    profile_text = f"<blockquote>üë§ –ü—Ä–æ—Ñ–∏–ª—å</blockquote>\n\n" \
                   f"<b>UID:</b> {user_id}\n" \
                   f"<b>–ì—Ä—É–ø–ø–∞:</b> {group_name}\n" \
                   f"<b>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</b> {role}"

    await message.answer(profile_text, reply_markup=ikb_start_add_group())


@menu_router.message(F.text == "üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def schedule_today_handler(message: types.Message, state: FSMContext):
    schedule_message = ""
    user = await ur.get_user(message.from_user.id)
    if (user is not None) and (user.group_id is not None):
        group = (await gr.get_group_by_id(user.group_id))["name"]
        print(shedule.get_all_groups())
        # TODO:–≤–û–ï–ù–ö–ê
        if group in shedule.get_all_groups():
            day = DayOfWeek.get_current_day()
            week_type = WeekType.get_week_type(datetime(2024, 9, 2), datetime.now())
            schedule_message += "<blockquote>üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è </blockquote> " \
                                + "\n\n" + str(shedule.get_group_day_schedule(group, day, week_type))
        else:
            schedule_message += "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É."
    else:
        schedule_message += "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"

    await message.answer(schedule_message)


@menu_router.message(F.text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def schedule_today_handler(message: types.Message, state: FSMContext):
    schedule_message = ""
    print("aaaaaaaaaaaaaaaaaaa")
    user = await ur.get_user(message.from_user.id)
    if (user is not None) and (user.group_id is not None):
        group = (await gr.get_group_by_id(user.group_id))["name"]
        print(shedule.get_all_groups())
        if group in shedule.get_all_groups():
            day = DayOfWeek.get_current_day()
            week_type = WeekType.get_week_type(datetime(2024, 9, 2), datetime.now())
            for day in DayOfWeek:
                if day.value >= DayOfWeek.get_current_day().value:
                    schedule_string: str = str(shedule.get_group_day_schedule(group, day, week_type)).lstrip('\n')
                    print(schedule_string)
                    await message.answer(f"<blockquote>üóì {day} </blockquote>"
                                         f" \n {schedule_string} \n\n")
        else:
            await message.answer("‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É.")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


@menu_router.message(F.document)
async def upload_file_parser_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    user = await ur.get_user(message.from_user.id)
    document = message.document

    file_info = await message.bot.get_file(document.file_id)
    print(file_info)
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_path = "bot/bin/schedule.xlsx"
    await message.bot.download_file(file_info.file_path, file_path)
    await message.answer(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏ {file_path}.")
    parse_message = True
    try:
        parser = Parser()
        grp_shedule: UniversitySchedule = parser.parse_file(file_path)
        shedule.merge_schedules(grp_shedule)
    except Exception as e:
        print(e)
        parse_message = False

    if parse_message:
        await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb_start_main_menu(user))
        try:
            os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return await state.clear()
    else:
        await state.clear()
        return await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=kb_start_main_menu(user))


@menu_router.message(F.text == "üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
async def upload_file(message: types.Message, state: FSMContext):
    user = await ur.get_user(message.from_user.id)
    if user.role != "admin":
        return
    await message.answer("üìÇ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (.txt).", reply_markup=kb_cancel())
    await state.set_state(UploadFileState.upload_file)


@menu_router.message(F.text == "üë• –ì—Ä—É–ø–ø—ã")
async def upload_file(message: types.Message):
    user = await ur.get_user(message.from_user.id)
    if user.role != "admin":
        return

    groups = await gr.get_groups()
    groups_message = "üë• –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n\n"

    if len(groups) != 0:
        couter_groups = 1
        for group in groups:
            id = group["id"]
            name = group["name"]

            groups_message += f"<blockquote><b>{couter_groups}. {name}</b> \n[gID: {id}]</blockquote>\n"
            couter_groups += 1

    else:
        return await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.")

    return await message.answer(groups_message, parse_mode='HTML', reply_markup=ikb_groups_configure())
