from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from bot.keyboards import kb_start_main_menu
from bot.utils.states.find_aud_state import FindAudState
from ..utils.postgres.repository import user_repo as ur


find_aud_router = Router()


@find_aud_router.message(StateFilter(FindAudState.find_aud))
async def find_aud_handler(message: types.Message, state: FSMContext):
    # todo –ü—Ä–æ–≤–µ—Ä–∫–∏
    user = await ur.get_user(message.from_user.id)
    user_text = message.text.strip()
    stage_of_aud = None
    try:
        stage_of_aud = int(user_text[0])
    except Exception as e:
        print(e)
        await state.clear()
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏", reply_markup=kb_start_main_menu(user))
        return

    not_find_aud_text = "–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üò¢"
    result_answer = ""

    if user_text == "155":
        result_answer += f"üß≠ –ú–µ—Å—Ç–æ—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n" \
                             f"–≠—Ç–∞–∂: {stage_of_aud}\n" \
                             f"–õ–µ–≤–æ–µ –∫—Ä—ã–ª–æ -> –ö–∞—Ñ–µ–¥—Ä–∞ –°–ê–ü–† –í–°\n"
    else:
        result_answer = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ {stage_of_aud} —ç—Ç–∞–∂–µ.' if 1 <= stage_of_aud <= 4 else not_find_aud_text

    await message.answer(result_answer, reply_markup=kb_start_main_menu(user))
    await state.clear()


