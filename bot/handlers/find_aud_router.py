from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InputFile, FSInputFile

from bot.keyboards import kb_start_main_menu
from bot.utils.states.find_aud_state import FindAudState
from ..bin.auditories import rooms
from ..repository import user_repo as ur
from ..utils.others.auditories_util import find_route

find_aud_router = Router()



@find_aud_router.message(StateFilter(FindAudState.current_aud))
async def current_aud_handler(message: types.Message, state: FSMContext):
    user = await ur.get_user(message.from_user.id)
    user_text = message.text.strip()

    if user_text not in rooms:
        await message.answer("üò¢ –¢–∞–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=kb_start_main_menu(user))
        await state.clear()
        return

    state_data = await state.get_data()
    find_aud = state_data.get("find_aud")
    current_aud = user_text

    if current_aud == find_aud:
        await message.answer("ü§∑‚Äç‚ôÇÔ∏è –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω—É–∂–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.", reply_markup=kb_start_main_menu(user))
        await state.clear()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
    route = find_route(current_aud, find_aud)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if route:
        if find_aud == "209":
            await message.answer_photo(FSInputFile("bot/bin/images/2_209.png"), caption="\n".join(route), reply_markup=kb_start_main_menu(user))
        else:
            await message.answer("\n".join(route), reply_markup=kb_start_main_menu(user))
    else:
        await message.answer("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω—É–∂–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.", reply_markup=kb_start_main_menu(user))
    await state.clear()


@find_aud_router.message(StateFilter(FindAudState.find_aud))
async def find_aud_handler(message: types.Message, state: FSMContext):
    user = await ur.get_user(message.from_user.id)
    user_text = message.text.strip()

    if user_text not in rooms:
        await message.answer("üò¢ –¢–∞–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=kb_start_main_menu(user))
        await state.clear()
        return


    await state.set_data(
        {
            "find_aud": user_text
        }
    )

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–ª–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—É—é —Ä—è–¥–æ–º —Å –≤–∞–º–∏.")
    await state.set_state(FindAudState.current_aud)


@find_aud_router.callback_query(lambda callback: callback.data.startswith("list_aud"))
async def list_aud_callback(callback: types.CallbackQuery):
    # todo –î–æ–¥–µ–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–π
    await callback.answer()